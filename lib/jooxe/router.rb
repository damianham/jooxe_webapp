
module Jooxe
  

  class Router
 
    def initialize(glob_pattern = nil)
      Jooxe::Loader.load_databases glob_pattern unless glob_pattern.nil?
    end
    
=begin
  decode path into [database]/class[/id][/action]
  or with a nested path
  decode path into [database]/class/id/class[/id][/action]

=end
 
    def route(env)
      path = env["PATH_INFO"]
    
      @env = env
    
      path_elements = path.split('/')
    
      while path_elements[0] == ''
        path_elements.shift
      end
    
      @database_name = consume_context(path_elements)
      
      return {:root => true, :database_name => @database_name} if path_elements.length == 0
      
      # use the default database if no prefix given
      @database = $dbs[@database_name] || $dbs['default'] || {}
    
      @route_info = Hash.new # (:database => @database,         :database_name => @database_name)
      
      while path_elements.length > 0
        
        # the next component should be a valid class name
        class_name = consume_class(path_elements)

        @route_info[:model_class_name] = class_name.to_model_name unless class_name.nil?
        @route_info[:controller_class] = @controller_class
        @route_info[:model_class] = @model_class
        @route_info[:column_info] = @column_info
        @route_info[:table_name] = @table_name

        # id and action may be nil
        id = consume_id(path_elements)

        action = consume_action(path_elements)

        if action.nil? and ! id.nil?
          action = 'show'
        elsif action.nil? and id.nil?
          action = 'index'
        end
      
        @route_info.update({ :id => id, :action => action })
      
        @route_info[(class_name.to_s.singularize+'_id').to_sym] = id unless @route_info[:model_class_name].nil? or id.nil?
      
      end
      
      @route_info
    
    end

    def consume_context(paths)
      if $dbs.has_key?(paths[0]) 
        paths.shift
      end
    end
  
    def consume_class(paths)
      return nil if paths[0].nil?
    
      # generate the controller name
      class_name =  paths[0].to_controller_name
      
      possible_table_names = [paths[0], paths[0].singularize, paths[0].pluralize]
      
      @table_name = possible_table_names.dup.keep_if { |name| @database.has_key?(name)}[0]
      
      if @table_name.nil?     
        raise NameError.new("Class not found #{class_name}")
      end
      
      @column_info = @database[@table_name]
      
      begin 
        # assign the controller class 
        eval "@controller_class = #{class_name}.new"        
        @controller_class.env=@env.merge(:route_info => @route_info)
      rescue NameError => boom
        # loading the class failed so create the controller class dynamically
        @controller_class = Jooxe::DynamicClassCreator.create_controller(@env.merge(:route_info => @route_info),paths[0])
      end

      # assign the model
      class_name =  paths[0].to_model_name
      begin
        eval "@model_class = #{class_name}.new"
      rescue NameError => boom
        # loading the class failed so create the model class dynamically
        @model_class = Jooxe::DynamicClassCreator.create_model(@env.merge(:route_info => @route_info),paths[0])
        @model_class.env = @env.merge(:route_info => @route_info)
      end
      
      return paths.shift
      
    end
  
    def consume_id(paths)
      return nil if paths[0].nil?
    
      # the result could be a numeric ID /^\d+$/

      return paths.shift if paths[0] =~ /^\d+$/
    
      # IDs generated by SecureRandom.urlsafe_base64 (rfc 3584) are usually 4/3 of 16 bytes or more
      # a UUID generated by SecureRandom.uuid  is a v4 Random UUID (rfc 4112) 5 groups of chars 8-4-4-4-12
    
      return nil unless paths[0].length > 16
    
      # if there is any number in the path element then it is an ID
      if paths[0] =~ /\d/
        return paths.shift
      end
    end
  
    def consume_action(paths)
      return nil if paths[0].nil?
    
      # if the element is a known class we cannot consider it an action
      return nil if @database.has_key?(paths[0])

      # if the path element is the last element in the path check 
      # a method of the same name can be performed on the current controller class
      if paths.length ==1
        if ! @controller_class.nil? && @controller_class.respond_to?(paths[0].to_sym)
          return paths.shift
        end 
      end
   
    end
  
  end

end